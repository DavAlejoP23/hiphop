$svg-icons: (
  arrow-more:
    '<svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 21 12"><path fill="#FFFFFF" fill-rule="evenodd" d="M14.778 0L13.68 1.058l4.34 4.192H0v1.5h18.021l-4.34 4.193L14.778 12 21 6l-6.222-6z" clip-rule="evenodd"></path></svg>',
  arrow-back:
    '<svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 21 12"><path fill="#FFFFFF" fill-rule="evenodd" d="M0,6l6.2,6l1.1-1.1L3,6.8h18V5.2H3l4.3-4.2L6.2,0L0,6z" clip-rule="evenodd"></path></svg>',
  icon-login:
    '<svg viewBox="0 0 28 28" fill="none" xmlns="http://www.w3.org/2000/svg"><path fill-rule="evenodd" clip-rule="evenodd" d="M18.6667 7C18.6667 9.57733 16.5773 11.6667 14 11.6667C11.4227 11.6667 9.33333 9.57733 9.33333 7C9.33333 4.42267 11.4227 2.33333 14 2.33333C16.5773 2.33333 18.6667 4.42267 18.6667 7ZM21 7C21 10.866 17.866 14 14 14C10.134 14 7 10.866 7 7C7 3.13401 10.134 0 14 0C17.866 0 21 3.13401 21 7ZM9.33333 16.3333C4.17868 16.3333 0 20.512 0 25.6667V26.8333C0 27.4777 0.522334 28 1.16667 28C1.811 28 2.33333 27.4777 2.33333 26.8333V25.6667C2.33333 21.8007 5.46734 18.6667 9.33333 18.6667H18.6667C22.5327 18.6667 25.6667 21.8007 25.6667 25.6667V26.8333C25.6667 27.4777 26.189 28 26.8333 28C27.4777 28 28 27.4777 28 26.8333V25.6667C28 20.512 23.8213 16.3333 18.6667 16.3333H9.33333Z" fill="#f4d35e"/></svg>',
);

/**
* Characters to escape from SVGs
* Source: https://github.com/Threespot/frontline-sass/blob/master/src/variables/_escape-chars.scss
*/
$fs-escape-chars: (
  " ": "%20",
  "'": "%22",
  '"': "%27",
  "#": "%23",
  "/": "%2F",
  ":": "%3A",
  "(": "%28",
  ")": "%29",
  "%": "%25",
  "<": "%3C",
  ">": "%3E",
  "\\":"%5C",
  "^": "%5E",
  "{": "%7B",
  "|": "%7C",
  "}": "%7D",
);

/**
 * Helper to get URL-escaped inline SVG code
 */
@function svg($name) {
  // Check if icon exists
  @if not map-has-key($svg-icons, $name) {
    @error 'icon “#{$name}” does not exists in $svg-icons map';
    @return false;
  }

  // Get icon data
  $icon-map: map-get($svg-icons, $name);

  $escaped-string: "";
  $unquote-icon: unquote($icon-map);
  // Loop through each character in string
  @for $i from 1 through str-length($unquote-icon) {
    $char: str-slice($unquote-icon, $i, $i);

    // Check if character is in symbol map
    $char-lookup: map-get($fs-escape-chars, $char);

    // If it is, use escaped version
    @if $char-lookup != null {
      $char: $char-lookup;
    }

    // Append character to escaped string
    $escaped-string: $escaped-string + $char;
  }

  // Return inline SVG data
  @return url("data:image/svg+xml, #{$escaped-string} ");
}

:root {
  @each $name, $code in $svg-icons {
    --svg-#{$name}: #{svg($name)};
  }
}
